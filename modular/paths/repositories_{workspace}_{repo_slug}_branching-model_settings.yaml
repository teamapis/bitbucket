get:
  tags:
    - Branching model
  description: >-
    Return the branching model configuration for a repository. The returned

    object:


    1. Always has a `development` property for the development branch.

    2. Always a `production` property for the production branch. The
       production branch can be disabled.
    3. The `branch_types` contains all the branch types.


    This is the raw configuration for the branching model. A client

    wishing to see the branching model with its actual current branches may

    find the [active model
    API](/cloud/bitbucket/rest/api-group-branching-model/#api-repositories-workspace-repo-slug-branching-model-get)
    more useful.


    Example body:


    ```

    {
      "development": {
        "is_valid": true,
        "name": null,
        "use_mainbranch": true
      },
      "production": {
        "is_valid": true,
        "name": "production",
        "use_mainbranch": false,
        "enabled": false
      },
      "branch_types": [
        {
          "kind": "release",
          "enabled": true,
          "prefix": "release/"
        },
        {
          "kind": "hotfix",
          "enabled": true,
          "prefix": "hotfix/"
        },
        {
          "kind": "feature",
          "enabled": true,
          "prefix": "feature/"
        },
        {
          "kind": "bugfix",
          "enabled": false,
          "prefix": "bugfix/"
        }
      ],
      "type": "branching_model_settings",
      "links": {
        "self": {
          "href": "https://api.bitbucket.org/.../branching-model/settings"
        }
      }
    }

    ```
  summary: Get the branching model config for a repository
  responses:
    '200':
      description: The branching model configuration
      content:
        application/json:
          schema:
            $ref: ../components/schemas/branching_model_settings.yaml
    '401':
      description: If the request was not authenticated
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '403':
      description: If the authenticated user does not have admin access to the repository
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '404':
      description: If the repository does not exist
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
  security:
    - oauth2:
        - repository:admin
    - basic: []
    - api_key: []
put:
  tags:
    - Branching model
  description: |-
    Update the branching model configuration for a repository.

    The `development` branch can be configured to a specific branch or to
    track the main branch. When set to a specific branch it must
    currently exist. Only the passed properties will be updated. The
    properties not passed will be left unchanged. A request without a
    `development` property will leave the development branch unchanged.

    It is possible for the `development` branch to be invalid. This
    happens when it points at a specific branch that has been
    deleted. This is indicated in the `is_valid` field for the branch. It is
    not possible to update the settings for `development` if that
    would leave the branch in an invalid state. Such a request will be
    rejected.

    The `production` branch can be a specific branch, the main
    branch or disabled. When set to a specific branch it must currently
    exist. The `enabled` property can be used to enable (`true`) or
    disable (`false`) it. Only the passed properties will be updated. The
    properties not passed will be left unchanged. A request without a
    `production` property will leave the production branch unchanged.

    It is possible for the `production` branch to be invalid. This
    happens when it points at a specific branch that has been
    deleted. This is indicated in the `is_valid` field for the branch. A
    request that would leave `production` enabled and invalid will be
    rejected. It is possible to update `production` and make it invalid if
    it would also be left disabled.

    The `branch_types` property contains the branch types to be updated.
    Only the branch types passed will be updated. All updates will be
    rejected if it would leave the branching model in an invalid state.
    For branch types this means that:

    1. The prefixes for all enabled branch types are valid. For example,
       it is not possible to use '*' inside a Git prefix.
    2. A prefix of an enabled branch type must not be a prefix of another
       enabled branch type. This is to ensure that a branch can be easily
       classified by its prefix unambiguously.

    It is possible to store an invalid prefix if that branch type would be
    left disabled. Only the passed properties will be updated. The
    properties not passed will be left unchanged. Each branch type must
    have a `kind` property to identify it.

    Example Body:

    ```
        {
          "development": {
            "use_mainbranch": true
          },
          "production": {
            "enabled": true,
            "use_mainbranch": false,
            "name": "production"
          },
          "branch_types": [
            {
              "kind": "bugfix",
              "enabled": true,
              "prefix": "bugfix/"
            },
            {
              "kind": "feature",
              "enabled": true,
              "prefix": "feature/"
            },
            {
              "kind": "hotfix",
              "prefix": "hotfix/"
            },
            {
              "kind": "release",
              "enabled": false,
            }
          ]
        }
    ```

    There is currently a side effect when using this API endpoint. If the
    repository is inheriting branching model settings from its project,
    updating the branching model for this repository will disable the
    project setting inheritance.


    We have deprecated this side effect and will remove it on 1 August 2022.
  summary: Update the branching model config for a repository
  responses:
    '200':
      description: The updated branching model configuration
      content:
        application/json:
          schema:
            $ref: ../components/schemas/branching_model_settings.yaml
    '400':
      description: If the request contains invalid branching model configuration
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '401':
      description: If the request was not authenticated
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '403':
      description: If the authenticated user does not have admin access to the repository
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '404':
      description: If the repository does not exist
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
  security:
    - oauth2:
        - repository:admin
    - basic: []
    - api_key: []
parameters:
  - name: repo_slug
    in: path
    description: |
      This can either be the repository slug or the UUID of the repository,
      surrounded by curly-braces, for example: `{repository UUID}`.
    required: true
    schema:
      type: string
  - name: workspace
    in: path
    description: |
      This can either be the workspace ID (slug) or the workspace UUID
      surrounded by curly-braces, for example: `{workspace UUID}`.
    required: true
    schema:
      type: string
