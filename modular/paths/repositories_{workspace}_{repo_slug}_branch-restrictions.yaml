get:
  tags:
    - Branch restrictions
  description: |-
    Returns a paginated list of all branch restrictions on the
    repository.
  summary: List branch restrictions
  responses:
    '200':
      description: A paginated list of branch restrictions
      content:
        application/json:
          schema:
            $ref: ../components/schemas/paginated_branchrestrictions.yaml
    '401':
      description: If the request was not authenticated
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '403':
      description: If the authenticated user does not have admin access to the repository
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '404':
      description: If the repository does not exist
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
  parameters:
    - name: kind
      in: query
      description: Branch restrictions of this type
      required: false
      schema:
        type: string
    - name: pattern
      in: query
      description: Branch restrictions applied to branches of this pattern
      required: false
      schema:
        type: string
  security:
    - oauth2:
        - repository:admin
    - basic: []
    - api_key: []
post:
  tags:
    - Branch restrictions
  description: |-
    Creates a new branch restriction rule for a repository.

    `kind` describes what will be restricted. Allowed values include:
    `push`, `force`, `delete` and `restrict_merges`.

    Different kinds of branch restrictions have different requirements:

    * `push` and `restrict_merges` require `users` and `groups` to be
      specified. Empty lists are allowed, in which case permission is
      denied for everybody.

    The restriction applies to all branches that match. There are
    two ways to match a branch. It is configured in `branch_match_kind`:

    1. `glob`: Matches a branch against the `pattern`. A `'*'` in
       `pattern` will expand to match zero or more characters, and every
       other character matches itself. For example, `'foo*'` will match
       `'foo'` and `'foobar'`, but not `'barfoo'`. `'*'` will match all
       branches.
    2. `branching_model`: Matches a branch against the repository's
       branching model. The `branch_type` controls the type of branch
       to match. Allowed values include: `production`, `development`,
       `bugfix`, `release`, `feature` and `hotfix`.

    The combination of `kind` and match must be unique. This means that
    two `glob` restrictions in a repository cannot have the same `kind` and
    `pattern`. Additionally, two `branching_model` restrictions in a
    repository cannot have the same `kind` and `branch_type`.

    `users` and `groups` are lists of users and groups that are except from
    the restriction. They can only be configured in `push` and
    `restrict_merges` restrictions. The `push` restriction stops a user
    pushing to matching branches unless that user is in `users` or is a
    member of a group in `groups`. The `restrict_merges` stops a user
    merging pull requests to matching branches unless that user is in
    `users` or is a member of a group in `groups`. Adding new users or
    groups to an existing restriction should be done via `PUT`.

    Note that branch restrictions with overlapping matchers is allowed,
    but the resulting behavior may be surprising.
  summary: Create a branch restriction rule
  responses:
    '201':
      description: A paginated list of branch restrictions
      content:
        application/json:
          schema:
            $ref: ../components/schemas/branchrestriction.yaml
    '401':
      description: If the request was not authenticated
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '403':
      description: If the authenticated user does not have admin access to the repository
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '404':
      description: If the repository does not exist
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
  requestBody:
    content:
      application/json:
        schema:
          $ref: ../components/schemas/branchrestriction.yaml
    description: The new rule
    required: true
  security:
    - oauth2:
        - repository:admin
    - basic: []
    - api_key: []
parameters:
  - name: repo_slug
    in: path
    description: |
      This can either be the repository slug or the UUID of the repository,
      surrounded by curly-braces, for example: `{repository UUID}`.
    required: true
    schema:
      type: string
  - name: workspace
    in: path
    description: |
      This can either be the workspace ID (slug) or the workspace UUID
      surrounded by curly-braces, for example: `{workspace UUID}`.
    required: true
    schema:
      type: string
