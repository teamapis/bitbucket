get:
  tags:
    - Pipelines
  summary: List pipelines
  description: Find pipelines
  operationId: getPipelinesForRepository
  parameters:
    - name: workspace
      description: >-
        This can either be the workspace ID (slug) or the workspace UUID
        surrounded by curly-braces, for example `{workspace UUID}`.
      required: true
      in: path
      schema:
        type: string
    - name: repo_slug
      description: The repository.
      required: true
      in: path
      schema:
        type: string
  responses:
    '200':
      description: The matching pipelines.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/paginated_pipelines.yaml
post:
  tags:
    - Pipelines
  summary: Run a pipeline
  description: "Endpoint to create and initiate a pipeline.\nThere are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated.\n# Trigger a Pipeline for a branch\nOne way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline.\nThe specified branch will be used to determine which pipeline definition from the `bitbucket-pipelines.yml` file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.\n\n### Example\n\n```\n$ curl -X POST -is -u username:password \\\n  -H 'Content-Type: application/json' \\\n https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\\n  -d '\n  {\n    \"target\": {\n      \"ref_type\": \"branch\",\n      \"type\": \"pipeline_ref_target\",\n      \"ref_name\": \"master\"\n    }\n  }'\n```\n# Trigger a Pipeline for a commit on a branch or tag\nYou can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark).\nThe specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.\n\nThe following reference types are supported:\n\n* `branch`\n* `named_branch`\n* `bookmark`\n * `tag`\n\n### Example\n\n```\n$ curl -X POST -is -u username:password \\\n  -H 'Content-Type: application/json' \\\n  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\\n  -d '\n  {\n    \"target\": {\n      \"commit\": {\n        \"type\": \"commit\",\n        \"hash\": \"ce5b7431602f7cbba007062eeb55225c6e18e956\"\n      },\n      \"ref_type\": \"branch\",\n      \"type\": \"pipeline_ref_target\",\n      \"ref_name\": \"master\"\n    }\n  }'\n```\n# Trigger a specific pipeline definition for a commit\nYou can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit.\nIn addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.\n\n### Example\n\n```\n$ curl -X POST -is -u username:password \\\n  -H 'Content-Type: application/json' \\\n https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\\n -d '\n  {\n     \"target\": {\n      \"commit\": {\n         \"hash\":\"a3c4e02c9a3755eccdc3764e6ea13facdf30f923\",\n         \"type\":\"commit\"\n       },\n        \"selector\": {\n           \"type\":\"custom\",\n              \"pattern\":\"Deploy to production\"\n          },\n        \"type\":\"pipeline_commit_target\"\n   }\n  }'\n```\n# Trigger a specific pipeline definition for a commit on a branch or tag\nYou can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit in the context of a specified reference.\nIn addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.\n\n### Example\n\n```\n$ curl -X POST -is -u username:password \\\n  -H 'Content-Type: application/json' \\\n https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\\n -d '\n  {\n     \"target\": {\n      \"commit\": {\n         \"hash\":\"a3c4e02c9a3755eccdc3764e6ea13facdf30f923\",\n         \"type\":\"commit\"\n       },\n       \"selector\": {\n          \"type\": \"custom\",\n          \"pattern\": \"Deploy to production\"\n       },\n       \"type\": \"pipeline_ref_target\",\n       \"ref_name\": \"master\",\n       \"ref_type\": \"branch\"\n     }\n  }'\n```\n\n\n# Trigger a custom pipeline with variables\nIn addition to triggering a custom pipeline that is defined in your `bitbucket-pipelines.yml` file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).\n\n### Example\n\n```\n$ curl -X POST -is -u username:password \\\n  -H 'Content-Type: application/json' \\\n https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\\n -d '\n  {\n    \"target\": {\n      \"type\": \"pipeline_ref_target\",\n      \"ref_type\": \"branch\",\n      \"ref_name\": \"master\",\n      \"selector\": {\n        \"type\": \"custom\",\n        \"pattern\": \"Deploy to production\"\n      }\n    },\n    \"variables\": [\n      {\n        \"key\": \"var1key\",\n        \"value\": \"var1value\",\n        \"secured\": true\n      },\n      {\n        \"key\": \"var2key\",\n        \"value\": \"var2value\"\n      }\n    ]\n  }'\n```\n\n# Trigger a pull request pipeline\n\nYou can also initiate a pipeline for a specific pull request.\n\n### Example\n\n```\n$ curl -X POST -is -u username:password \\\n  -H 'Content-Type: application/json' \\\n https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\\n -d '\n  {\n\t\"target\": {\n      \"type\": \"pipeline_pullrequest_target\",\n\t  \"source\": \"pull-request-branch\",\n      \"destination\": \"master\",\n      \"destination_commit\": {\n      \t \"hash\" : \"9f848b7\"\n      },\n      \"commit\": {\n      \t\"hash\" : \"1a372fc\"\n      },\n      \"pullrequest\" : {\n      \t\"id\" : \"3\"\n      },\n\t  \"selector\": {\n        \"type\": \"pull-requests\",\n        \"pattern\": \"**\"\n      }\n    }\n  }'\n```\n"
  operationId: createPipelineForRepository
  parameters:
    - name: workspace
      description: >-
        This can either be the workspace ID (slug) or the workspace UUID
        surrounded by curly-braces, for example `{workspace UUID}`.
      required: true
      in: path
      schema:
        type: string
    - name: repo_slug
      description: The repository.
      required: true
      in: path
      schema:
        type: string
  requestBody:
    content:
      application/json:
        schema:
          $ref: ../components/schemas/pipeline.yaml
    description: The pipeline to initiate.
    required: true
  responses:
    '201':
      description: The initiated pipeline.
      headers:
        Location:
          description: The URL of the newly created pipeline.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: ../components/schemas/pipeline.yaml
    '400':
      description: >-
        The account or repository is not enabled, the yml file does not exist in
        the repository for the given revision, or the request body contained
        invalid properties.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '404':
      description: The account or repository was not found.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
