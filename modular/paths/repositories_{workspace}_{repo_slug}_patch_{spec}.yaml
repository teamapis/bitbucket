get:
  tags:
    - Commits
  description: |-
    Produces a raw patch for a single commit (diffed against its first
    parent), or a patch-series for a revspec of 2 commits (e.g.
    `3a8b42..9ff173` where the first commit represents the source and the
    second commit the destination).

    In case of the latter (diffing a revspec), a patch series is returned
    for the commits on the source branch (`3a8b42` and its ancestors in
    our example).

    While similar to diffs, patches:

    * Have a commit header (username, commit message, etc)
    * Do not support the `path=foo/bar.py` query parameter

    The raw patch is returned as-is, in whatever encoding the files in the
    repository use. It is not decoded into unicode. As such, the
    content-type is `text/plain`.
  summary: Get a patch for two commits
  responses:
    '200':
      description: The raw patches
    '555':
      description: |-
        If the diff was too large and timed out.

        Since this endpoint does not employ any form of pagination, but
        instead returns the diff as a single document, it can run into
        trouble on very large diffs. If Bitbucket times out in cases
        like these, a 555 status code is returned.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
  security:
    - oauth2:
        - repository
    - basic: []
    - api_key: []
parameters:
  - name: repo_slug
    in: path
    description: |
      This can either be the repository slug or the UUID of the repository,
      surrounded by curly-braces, for example: `{repository UUID}`.
    required: true
    schema:
      type: string
  - name: spec
    in: path
    description: |
      A commit SHA (e.g. `3a8b42`) or a commit range using double dot
      notation (e.g. `3a8b42..9ff173`).
    required: true
    schema:
      type: string
  - name: workspace
    in: path
    description: |
      This can either be the workspace ID (slug) or the workspace UUID
      surrounded by curly-braces, for example: `{workspace UUID}`.
    required: true
    schema:
      type: string
