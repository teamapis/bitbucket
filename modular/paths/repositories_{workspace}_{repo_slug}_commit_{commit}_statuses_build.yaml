post:
  tags:
    - Commit statuses
  description: >-
    Creates a new build status against the specified commit.


    If the specified key already exists, the existing status object will

    be overwritten.


    Example:


    ```

    curl
    https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo/commit/e10dae226959c2194f2b07b077c07762d93821cf/statuses/build/          
    -X POST -u jdoe -H 'Content-Type: application/json'           -d '{
        "key": "MY-BUILD",
        "state": "SUCCESSFUL",
        "description": "42 tests passed",
        "url": "https://www.example.org/my-build-result"
      }'
    ```


    When creating a new commit status, you can use a URI template for the URL.

    Templates are URLs that contain variable names that Bitbucket will

    evaluate at runtime whenever the URL is displayed anywhere similar to

    parameter substitution in

    [Bitbucket
    Connect](https://developer.atlassian.com/bitbucket/concepts/context-parameters.html).

    For example, one could use `https://foo.com/builds/{repository.full_name}`

    which Bitbucket will turn into `https://foo.com/builds/foo/bar` at render
    time.

    The context variables available are `repository` and `commit`.
  summary: Create a build status for a commit
  responses:
    '201':
      description: The newly created build status object.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/commitstatus.yaml
    '401':
      description: If the repository is private and the request was not authenticated.
    '404':
      description: If the repository, commit, or build status key does not exist
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
  requestBody:
    content:
      application/json:
        schema:
          $ref: ../components/schemas/commitstatus.yaml
    description: The new commit status object.
  security:
    - oauth2:
        - repository
    - basic: []
    - api_key: []
parameters:
  - name: commit
    in: path
    description: The commit's SHA1.
    required: true
    schema:
      type: string
  - name: repo_slug
    in: path
    description: |
      This can either be the repository slug or the UUID of the repository,
      surrounded by curly-braces, for example: `{repository UUID}`.
    required: true
    schema:
      type: string
  - name: workspace
    in: path
    description: |
      This can either be the workspace ID (slug) or the workspace UUID
      surrounded by curly-braces, for example: `{workspace UUID}`.
    required: true
    schema:
      type: string
