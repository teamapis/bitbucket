post:
  tags:
    - Issue tracker
  description: >-
    A POST request to this endpoint initiates a new background celery task that
    archives the repo's issues.


    For example, you can run:


    curl -u <username> -X POST
    http://api.bitbucket.org/2.0/repositories/<owner_username>/<repo_slug>/

    issues/export


    When the job has been accepted, it will return a 202 (Accepted) along with a
    unique url to this job in the

    'Location' response header. This url is the endpoint for where the user can
    obtain their zip files."
  summary: Export issues
  responses:
    '202':
      description: The export job has been accepted
    '401':
      description: The request wasn't authenticated properly
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '403':
      description: When the authenticated user does not have admin permission on the repo
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
    '404':
      description: The repo does not exist or does not have an issue tracker
      content:
        application/json:
          schema:
            $ref: ../components/schemas/error.yaml
  requestBody:
    content:
      application/json:
        schema:
          $ref: ../components/schemas/export_options.yaml
    description: >-
      The options to apply to the export. Available options include
      `project_key` and `project_name` which, if specified, are used as the
      project key and name in the exported Jira json format. Option `send_email`
      specifies whether an email should be sent upon export result. Option
      `include_attachments` specifies whether attachments are included in the
      export.
  security:
    - oauth2:
        - issue
        - repository:admin
    - basic: []
    - api_key: []
parameters:
  - name: repo_slug
    in: path
    description: |
      This can either be the repository slug or the UUID of the repository,
      surrounded by curly-braces, for example: `{repository UUID}`.
    required: true
    schema:
      type: string
  - name: workspace
    in: path
    description: |
      This can either be the workspace ID (slug) or the workspace UUID
      surrounded by curly-braces, for example: `{workspace UUID}`.
    required: true
    schema:
      type: string
