get:
  tags:
    - Repositories
  description: |-
    Returns a paginated list of all the forks of the specified
    repository.
  summary: List repository forks
  responses:
    '200':
      description: All forks.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/paginated_repositories.yaml
  parameters:
    - name: role
      in: query
      description: >
        Filters the result based on the authenticated user's role on each
        repository.


        * **member**: returns repositories to which the user has explicit read
        access

        * **contributor**: returns repositories to which the user has explicit
        write access

        * **admin**: returns repositories to which the user has explicit
        administrator access

        * **owner**: returns all repositories owned by the current user
      required: false
      schema:
        type: string
        enum:
          - admin
          - contributor
          - member
          - owner
    - name: q
      in: query
      description: >
        Query string to narrow down the response as per [filtering and
        sorting](/cloud/bitbucket/rest/intro/#filtering).
      required: false
      schema:
        type: string
    - name: sort
      in: query
      description: >
        Field by which the results should be sorted as per [filtering and
        sorting](/cloud/bitbucket/rest/intro/#filtering).
      required: false
      schema:
        type: string
  security:
    - oauth2:
        - repository
    - basic: []
    - api_key: []
post:
  tags:
    - Repositories
  description: >-
    Creates a new fork of the specified repository.


    #### Forking a repository


    To create a fork, specify the workspace explicitly as part of the

    request body:


    ```

    $ curl -X POST -u jdoe
    https://api.bitbucket.org/2.0/repositories/atlassian/bbql/forks \
      -H 'Content-Type: application/json' -d '{
        "name": "bbql_fork",
        "workspace": {
          "slug": "atlassian"
        }
    }'

    ```


    To fork a repository into the same workspace, also specify a new `name`.


    When you specify a value for `name`, it will also affect the `slug`.

    The `slug` is reflected in the repository URL of the new fork. It is

    derived from `name` by substituting non-ASCII characters, removes

    whitespace, and changes characters to lower case. For example,

    `My repo` would turn into `my_repo`.


    You need contributor access to create new forks within a workspace.



    #### Change the properties of a new fork


    By default the fork inherits most of its properties from the parent.

    However, since the optional POST body document follows the normal

    `repository` JSON schema and you can override the new fork's

    properties.


    Properties that can be overridden include:


    * description

    * fork_policy

    * language

    * mainbranch

    * is_private (note that a private repo's fork_policy might prohibit
      the creation of public forks, in which `is_private=False` would fail)
    * has_issues (to initialize or disable the new repo's issue tracker --
      note that the actual contents of the parent repository's issue
      tracker are not copied during forking)
    * has_wiki (to initialize or disable the new repo's wiki --
      note that the actual contents of the parent repository's wiki are not
      copied during forking)
    * project (when forking into a private project, the fork's `is_private`
      must be `true`)

    Properties that cannot be modified include:


    * scm

    * parent

    * full_name
  summary: Fork a repository
  responses:
    '201':
      description: The newly created fork.
      headers:
        Location:
          description: The URL of the newly created fork
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: ../components/schemas/repository.yaml
  requestBody:
    content:
      application/json:
        schema:
          $ref: ../components/schemas/repository.yaml
    description: A repository object. This can be left blank.
  security:
    - oauth2:
        - repository:write
    - basic: []
    - api_key: []
parameters:
  - name: repo_slug
    in: path
    description: |
      This can either be the repository slug or the UUID of the repository,
      surrounded by curly-braces, for example: `{repository UUID}`.
    required: true
    schema:
      type: string
  - name: workspace
    in: path
    description: |
      This can either be the workspace ID (slug) or the workspace UUID
      surrounded by curly-braces, for example: `{workspace UUID}`.
    required: true
    schema:
      type: string
